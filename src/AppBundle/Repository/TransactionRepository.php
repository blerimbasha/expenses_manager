<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * TransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TransactionRepository extends EntityRepository
{
    public function searchAction($userid)
    {
        $firstmonth = new \DateTime('first day of this month');
        $endDate = new \DateTime('last day of this month');

        return $this->createQueryBuilder('t')
            ->select('count(t.userId)')
            ->select('t')
            ->where('t.userId = :userid')
            ->andWhere('t.createDate BETWEEN :start AND :end')
            ->orderBy('t.createDate','DESC')
            ->setParameter('userid', $userid)
            ->setParameter('start', $firstmonth)
            ->setParameter('end', $endDate)
            ->getQuery()
            ->getResult();
    }

    public function searchLastMonthAction($userid)
    {
        $firstmonth = new \DateTime('first day of last month');
        $endDate = new \DateTime('last day of last month');

        $qb = $this->createQueryBuilder('t');
        $qb->where('t.createDate BETWEEN :start AND :end');
        $qb->andWhere('t.userId = :userid');
        $qb->orderBy('t.createDate','DESC');
        $qb->setParameter('userid', $userid);
        $qb->setParameter('start', $firstmonth);
        $qb->setParameter('end', $endDate);

        return $qb->getQuery()->getResult();
    }

    public function countAllTransactionAction($userid)
    {
        $firstmonth = new \DateTime('first day of this month');
        $endDate = new \DateTime('last day of this month');
        return $this->createQueryBuilder('t')
            ->select('Sum(t.quantity)')
            ->where('t.userId = :userid')
            ->andWhere('t.createDate BETWEEN :start AND :end')
            ->orderBy('t.createDate','DESC')
            ->setParameter('userid', $userid)
            ->setParameter('start', $firstmonth)
            ->setParameter('end', $endDate)
            ->getQuery()
            ->getResult();
    }
}
